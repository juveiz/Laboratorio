{"kernelspec":{"display_name":"SageMath 7.5","language":"","name":"sagemath"},"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":false,"trusted":true},"outputs":[],"source":"def diccionario(L):\n    dicc = {}\n    infile = open(\"PALABRAS2.txt\",\"r\")\n    for palabra in infile.readlines():\n        if len(palabra[:-1])<3:\n            '''Despreciamos palabras de 2 caracteres.'''\n            continue\n        elif dicc.has_key(palabra[:3]):\n           dicc[palabra[:3]].append(palabra[:-1])\n        else:\n            dicc[palabra[:3]]=[palabra[:-1]]\n    for palabra in L:\n        '''Este bucle es para añadir al diccionario unas pocas\n            palabras que podrían faltar. NO es importante'''\n        dicc[palabra]=[palabra]\n    infile.close()\n    return dicc"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":false,"trusted":true},"outputs":[],"source":"dicc=diccionario([])"}
{"cell_type":"code","execution_count":3,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"['GEOCENTRIC', 'GEOCENTRICALLY', 'GEOCENTRICISM', 'GEOCHEMICAL', 'GEOCHEMICALLY', 'GEOCHEMIST', 'GEOCHEMISTRY', 'GEOCHRONOLOGIC', 'GEOCHRONOLOGICAL', 'GEOCHRONOLOGICALLY', 'GEOCHRONOLOGIST', 'GEOCHRONOLOGY', 'GEOCHRONOMETRIC', 'GEOCHRONOMETRY', 'GEODE', \"GEODE'S\", 'GEODES', 'GEODESIC', 'GEODESICS', 'GEODESIST', 'GEODESY', 'GEODETIC', 'GEODETICAL', 'GEODETICALLY', 'GEODUCK', 'GEODYNAMICS', 'GEOFF', \"GEOFF'S\", 'GEOFFREY', \"GEOFFREY'S\", 'GEOGNOSY', 'GEOGRAPHER', \"GEOGRAPHER'S\", 'GEOGRAPHERS', 'GEOGRAPHIC', 'GEOGRAPHICAL', 'GEOGRAPHICALLY', 'GEOGRAPHIES', 'GEOGRAPHY', 'GEOHYDROLOGIC', 'GEOHYDROLOGY', 'GEOID', 'GEOLOGIC', 'GEOLOGICAL', 'GEOLOGIST', \"GEOLOGIST'S\", 'GEOLOGISTS', 'GEOLOGY', 'GEOMAGNETIC', 'GEOMAGNETICALLY', 'GEOMAGNETISM', 'GEOMANCY', 'GEOMANTIC', 'GEOMECHANICS', 'GEOMETER', \"GEOMETER'S\", 'GEOMETERS', 'GEOMETRIC', 'GEOMETRICAL', 'GEOMETRICALLY', 'GEOMETRICIAN', 'GEOMETRID', 'GEOMETRIES', 'GEOMETRY', 'GEOMORPHIC', 'GEOMORPHOLOGICAL', 'GEOMORPHOLOGY', 'GEOPHAGY', 'GEOPHYSICAL', 'GEOPHYSICALLY', 'GEOPHYSICIST', 'GEOPHYSICISTS', 'GEOPHYSICS', 'GEOPHYTE', 'GEOPOLITIC', 'GEOPOLITICAL', 'GEOPOLITICALLY', 'GEOPOLITICIAN', 'GEOPOLITICS', 'GEOPONIC', 'GEOPONICS', 'GEORDIE', 'GEORGE', \"GEORGE'S\", 'GEORGES', 'GEORGETOWN', 'GEORGETTE', 'GEORGIA', 'GEORGIAN', 'GEORGIANS', 'GEORGIC', 'GEOSCIENCE', 'GEOSPHERE', 'GEOSTATIC', 'GEOSTATICS', 'GEOSTRATEGIC', 'GEOSTRATEGIST', 'GEOSTRATEGY', 'GEOSTROPHIC', 'GEOSTROPHICALLY', 'GEOSYNCHRONOUS', 'GEOSYNCLINE', 'GEOTAXIS', 'GEOTECTONIC', 'GEOTHERMAL', 'GEOTHERMALLY', 'GEOTHERMIC', 'GEOTROPIC', 'GEOTROPICALLY', 'GEOTROPISM']\n"}],"source":"print dicc['GEO']"}
{"cell_type":"markdown","metadata":{},"source":"<h2>Fuerza bruta sobre un sistema criptogr&aacute;fico matricial</h2>"}
{"cell_type":"code","execution_count":4,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"R = Integers(26)"}
{"cell_type":"code","execution_count":5,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"M = MatrixSpace(R,2,2) ##M es el espacio de matrices $2\\times 2$ con coeficientes en R (el anillo de enteros modulo 26##"}
{"cell_type":"code","execution_count":6,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"456976"},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":"len(M)"}
{"cell_type":"code","execution_count":7,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"texto=\"THROUGHTHEUSEOFABSTRACTIONANDLOGICALREASONINGMATHEMATICSDEVELOPEDFROMCOUNTINGCALCULATIONMEASUREMENTANDTHESYSTEMATICSTUDYOFTHESHAPESANDMOTIONSOFPHYSICALOBJECTSPRACTICALMATHEMATICSHASBEENAHUMANACTIVITYFORASFARBACKASWRITTENRECORDSEXISTRIGOROUSARGUMENTSFIRSTAPPEAREDINGREEKMATHEMATICSMOSTNOTABLYINEUCLIDSELEMENTSMATHEMATICSDEVELOPEDATARELATIVELYSLOWPACEUNTILTHERENAISSANCEWHENMATHEMATICALINNOVATIONSINTERACTINGWITHNEWSCIENTIFICDISCOVERIESLEDTOARAPIDINCREASEINTHERATEOFMATHEMATICALDISCOVERYTHATCONTINUESTOTHEPRESENTDAYZ\""}
{"cell_type":"code","execution_count":8,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"514"},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":"len(texto)"}
{"cell_type":"code","execution_count":9,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"alfb = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\""}
{"cell_type":"code","execution_count":10,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n"}],"source":"L_alfb = list(alfb);print L_alfb"}
{"cell_type":"code","execution_count":11,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"def ord2(c):\n    return R(L_alfb.index(c))"}
{"cell_type":"code","execution_count":12,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"def chr2(n):\n    return L_alfb[n]"}
{"cell_type":"code","execution_count":13,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"texto_cod = map(ord2,list(texto))"}
{"cell_type":"markdown","metadata":{},"source":"<p>Esta funci&oacute;n encripta dividiendo el texto, una vez codificadas las letras como enteros,&nbsp; en trozos de dos caracteres y multiplicando el vector resultante por una matriz fijada. La funci&oacute;n es recursiva, pero ser&iacute;a f&aacute;cil transformarla en una iterativa. Se ha a&ntilde;adido una Z al final del texto para que la longitud sea par y no haya problema con un &uacute;ltimo trozo de longitud $1$.</p>"}
{"cell_type":"code","execution_count":14,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"def encriptar_matr(texto_cod,matriz):\n    if len(texto_cod) == 0:\n        return []\n    V1 = vector(R,texto_cod[:2])\n    MC0 = list(matriz*V1)\n    TEN0 = encriptar_matr(texto_cod[2:],matriz)\n    MC1 = MC0+TEN0\n    return MC1"}
{"cell_type":"code","execution_count":15,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"[14, 7, 7, 14, 12, 6, 12, 19, 19, 4, 22, 18, 20, 14, 5, 0, 3, 18, 18, 17, 6, 2, 17, 8, 1, 13, 13, 13, 10, 11, 6, 6, 14, 2, 7, 11, 3, 4, 2, 18, 1, 13, 21, 13, 16, 12, 5, 19, 19, 4, 12, 0, 17, 8, 4, 18, 15, 4, 7, 4, 1, 14, 1, 4, 18, 5, 7, 14, 18, 2, 22, 20, 18, 19, 21, 13, 12, 2, 7, 11, 10, 20, 11, 0, 17, 8, 1, 13, 24, 4, 2, 18, 19, 17, 14, 12, 17, 13, 19, 0, 22, 3, 14, 7, 6, 18, 0, 18, 5, 4, 12, 0, 17, 8, 4, 18, 1, 20, 23, 24, 3, 5, 14, 7, 6, 18, 7, 0, 1, 4, 18, 0, 22, 3, 2, 14, 17, 8, 1, 13, 8, 14, 24, 15, 1, 24, 16, 8, 2, 0, 1, 14, 2, 9, 10, 2, 21, 18, 14, 17, 6, 2, 17, 8, 2, 0, 21, 12, 5, 19, 19, 4, 12, 0, 17, 8, 4, 18, 7, 0, 21, 1, 16, 4, 13, 0, 15, 20, 12, 0, 13, 0, 7, 19, 19, 21, 13, 19, 13, 5, 13, 17, 2, 18, 5, 0, 20, 1, 6, 2, 10, 0, 6, 22, 15, 8, 24, 19, 17, 13, 3, 4, 18, 14, 0, 3, 4, 4, 21, 8, 23, 19, 15, 8, 22, 14, 7, 14, 22, 18, 25, 17, 14, 20, 24, 4, 18, 19, 7, 5, 7, 17, 23, 19, 19, 15, 1, 4, 25, 17, 13, 3, 21, 13, 5, 17, 16, 4, 20, 12, 5, 19, 19, 4, 12, 0, 17, 8, 4, 18, 2, 14, 23, 19, 3, 14, 19, 0, 8, 11, 22, 8, 25, 4, 0, 2, 9, 8, 5, 18, 11, 11, 14, 12, 17, 13, 21, 18, 12, 0, 14, 7, 14, 12, 5, 19, 14, 2, 1, 3, 15, 21, 11, 11, 7, 15, 13, 3, 5, 19, 25, 17, 11, 11, 5, 19, 19, 21, 11, 11, 0, 18, 1, 14, 15, 15, 6, 2, 12, 20, 18, 19, 15, 11, 14, 7, 3, 17, 17, 13, 24, 8, 20, 18, 13, 13, 14, 4, 17, 7, 17, 13, 12, 0, 14, 7, 14, 12, 5, 19, 14, 2, 7, 11, 21, 13, 3, 14, 21, 0, 17, 8, 1, 13, 16, 8, 18, 19, 3, 17, 6, 2, 17, 8, 5, 6, 20, 8, 14, 7, 25, 4, 24, 18, 0, 8, 17, 13, 17, 8, 3, 8, 11, 3, 10, 18, 18, 14, 7, 4, 15, 8, 6, 18, 23, 4, 8, 19, 14, 0, 17, 0, 13, 8, 1, 8, 19, 2, 3, 4, 2, 18, 2, 8, 18, 19, 19, 4, 17, 0, 5, 4, 3, 5, 12, 0, 14, 7, 14, 12, 5, 19, 14, 2, 7, 11, 1, 8, 24, 2, 25, 21, 3, 17, 3, 19, 7, 0, 25, 2, 1, 13, 17, 8, 21, 20, 6, 18, 9, 14, 14, 7, 23, 15, 3, 4, 4, 4, 18, 19, 3, 0, 21, 25]\n"}],"source":"print encriptar_matr(texto_cod,matrix(R,[[1,3],[0,1]]))"}
{"cell_type":"markdown","metadata":{},"source":"<p>Esta funci&oacute;n es para devolver el texto encriptado como una cadena de caracteres en lugar de una lista de enteros.</p>"}
{"cell_type":"code","execution_count":16,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"from string import join\ndef encriptar_matr2(texto,matriz):\n    L = map(ord2,list(texto))\n    L1 = encriptar_matr(L,matriz)\n    return join(map(chr2,L1),sep = \"\")"}
{"cell_type":"code","execution_count":17,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"smc-blob::245db48d-569b-487f-ae9a-dc3071b93cca"},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":"texto_encrip = encriptar_matr2(texto,matrix(R,[[1,3],[0,1]]));texto_encrip"}
{"cell_type":"code","execution_count":18,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"smc-blob::99c16e2e-bae7-48c2-905c-ede98e4617e0"},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":"encriptar_matr2(texto_encrip,matrix(R,[[1,3],[0,1]]).inverse())"}
{"cell_type":"markdown","metadata":{},"source":"<h3>Fuerza bruta</h3>\n<p>En primer lugar generamos la lista de tripletas presentes en el texto y que tambi&eacute;n son claves del diccionario que generamos al principio de la hoja. Como NO sabemos c&oacute;mo separar el texto encriptado en palabras (el texto a encriptar no contiene espacios) tenemos que empezar las tripletas desde cada uno de los caracteres. Si no hay ninguna palabra en el diccionario que tiene como tripleta inicial una tripleta dada, esa no nos interesa.</p>"}
{"cell_type":"code","execution_count":19,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"def tripletas(texto,dicc):\n    L = []\n    n = len(texto)\n    for int in srange(0,n-2):\n        tri = texto[int:int+3]\n        if dicc.has_key(tri):\n            L.append(tri)\n    return L"}
{"cell_type":"code","execution_count":20,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"def procesar3(texto,dicc):\n    L = tripletas(texto,dicc)\n    cont = 0\n    for tri in L:\n        for palabra in dicc[tri]:\n            if len(palabra)>4 and texto.count(palabra)>0:\n                cont += 1\n    return cont"}
{"cell_type":"markdown","metadata":{},"source":"<p>El texto desencriptado tiene un mont&oacute;n de palabras del ingl&eacute;s:</p>"}
{"cell_type":"code","execution_count":21,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"CPU times: user 232 ms, sys: 24 ms, total: 256 ms\nWall time: 245 ms\n"},{"data":{"text/plain":"213"},"execution_count":21,"metadata":{},"output_type":"execute_result"}],"source":"time procesar3(texto,diccionario([]))"}
{"cell_type":"markdown","metadata":{},"source":"<p>En cambio si aplicamos la funci&oacute;n al texto encriptado s&oacute;lo encontramos unas pocas, y probablemente debido a que el archivo no est&aacute; purgado de palabras inexistentes:</p>"}
{"cell_type":"code","execution_count":22,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"CPU times: user 246 ms, sys: 28.2 ms, total: 274 ms\nWall time: 264 ms\n"},{"data":{"text/plain":"11"},"execution_count":22,"metadata":{},"output_type":"execute_result"}],"source":"time procesar3(texto_encrip,diccionario([]))"}
{"cell_type":"code","execution_count":23,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"def fuerza_bruta(texto,dict):\n    cont,ctexto = 0,texto\n    for matriz in M:\n        if gcd(det(matriz),26)==1:\n            texto_prueba = encriptar_matr2(texto,matriz)\n            n = procesar3(texto_prueba,dict)\n            if n > cont:\n                cont,ctexto = n,texto_prueba\n                print cont\n                if n > len(texto)//4:\n                    '''Este limite es un poco arbitrario \n                    y se basa en suponer que las palabras \n                    tendran en promedio longitud 4.''' \n                    break\n    return cont,ctexto"}
{"cell_type":"code","execution_count":24,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"11\n12\n57\n213\nCPU times: user 2min 38s, sys: 1.33 s, total: 2min 39s\nWall time: 2min 41s\n"},{"data":{"text/plain":"smc-blob::ae9e918d-f9e7-472c-a74c-89b33d2727eb"},"execution_count":24,"metadata":{},"output_type":"execute_result"}],"source":"time fuerza_bruta(texto_encrip,diccionario([]))"}
{"cell_type":"markdown","metadata":{},"source":"<h3>Versi&oacute;n paralela</h3>"}
{"cell_type":"code","execution_count":25,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"CPU times: user 46.1 s, sys: 329 ms, total: 46.5 s\nWall time: 46.3 s\n"}],"source":"time MM = [matriz for matriz in M if gcd(det(matriz),26)==1]"}
{"cell_type":"code","execution_count":26,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"157248"},"execution_count":26,"metadata":{},"output_type":"execute_result"}],"source":"len(MM)"}
{"cell_type":"code","execution_count":27,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"3500"},"execution_count":27,"metadata":{},"output_type":"execute_result"}],"source":"M1 = MM[0:3500];len(M1)"}
{"cell_type":"code","execution_count":28,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"3500"},"execution_count":28,"metadata":{},"output_type":"execute_result"}],"source":"M2 = MM[3500:7000];len(M2)"}
{"cell_type":"code","execution_count":29,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"3500"},"execution_count":29,"metadata":{},"output_type":"execute_result"}],"source":"M3 = MM[7000:10500];len(M3)"}
{"cell_type":"code","execution_count":30,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"146748"},"execution_count":30,"metadata":{},"output_type":"execute_result"}],"source":"M4 = MM[10500:];len(M4)"}
{"cell_type":"code","execution_count":31,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"@parallel(4)\ndef fuerza_bruta_p(M,texto,dict):\n    cont,ctexto = 0,texto\n    for matriz in M:\n        if gcd(det(matriz),26)==1:\n            texto_prueba = encriptar_matr2(texto,matriz)\n            n = procesar3(texto_prueba,dict)\n            if n > cont:\n                cont,ctexto = n,texto_prueba\n    return cont,ctexto"}
{"cell_type":"code","execution_count":32,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"descriptor 'has_key' requires a 'dict' object but received a 'str'\ndescriptor 'has_key' requires a 'dict' object but received a 'str'\ndescriptor 'has_key' requires a 'dict' object but received a 'str'\ndescriptor 'has_key' requires a 'dict' object but received a 'str'\nCPU times: user 0 ns, sys: 28.1 ms, total: 28.1 ms\nWall time: 126 ms\n"},{"data":{"text/plain":"smc-blob::f031f9cf-646d-4e8b-957f-5b139125da90"},"execution_count":32,"metadata":{},"output_type":"execute_result"}],"source":"time list(fuerza_bruta_p([(M1,texto,dict),(M2,texto,dict),(M3,texto,dict),(M4,texto,dict)]))"}