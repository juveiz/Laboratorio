{"kernelspec":{"display_name":"SageMath 7.5","language":"","name":"sagemath"},"language_info":{"codemirror_mode":"r","file_extension":".r","mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.2.4"}}
{"cell_type":"code","execution_count":1,"metadata":{"collapsed":false,"trusted":true},"outputs":[],"source":"alf = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ:;,#$@'"}
{"cell_type":"code","execution_count":2,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"ename":"ERROR","evalue":"Error in eval(expr, envir, enclos): could not find function \"len\"\n","output_type":"error","traceback":["Error in eval(expr, envir, enclos): could not find function \"len\"\nTraceback:\n"]}],"source":"len(alf)"}
{"cell_type":"markdown","metadata":{},"source":"<p>&iquest;Por qu&eacute; queremos usar un alfabeto de $32$ letras?</p>"}
{"cell_type":"code","execution_count":3,"metadata":{"collapsed":false,"trusted":true},"outputs":[],"source":"texto = 'THROUGHTHEUSEOFABSTRACTIONANDLOGICALREASONINGMATHEMATICSDEVELOPEDFROMCO\\\nUNTINGCALCULATIONMEASUREMENTANDTHESYSTEMATICSTUDYOFTHESHAPESANDMOTIONSOF\\\nPHYSICALOBJECTSPRACTICALMATHEMATICSHASBEENAHUMANACTIVITYFORASFARBACKASWR\\\nITTENRECORDSEXISTRIGOROUSARGUMENTSFIRSTAPPEAREDINGREEKMATHEMATICSMOSTNOT\\\nABLYINEUCLIDSELEMENTSMATHEMATICSDEVELOPEDATARELATIVELYSLOWPACEUNTILTHERE\\\nNAISSANCEWHENMATHEMATICALINNOVATIONSINTERACTINGWITHNEWSCIENTIFICDISCOVER\\\nIESLEDTOARAPIDINCREASEINTHERATEOFMATHEMATICALDISCOVERYTHATCONTINUESTOTHE\\\nPRESENTDAY'"}
{"cell_type":"code","execution_count":4,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"text/plain":"513"},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":"len(texto)"}
{"cell_type":"markdown","metadata":{},"source":"<h3>Apartado 1 : generar clave</h3>"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":false,"trusted":true},"outputs":[],"source":"clave = [randint(0,1) for muda in xrange(10^6)]"}
{"cell_type":"code","execution_count":6,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"[49947, 50024, 50120, 49951, 50061, 49883, 49855, 49778, 49949, 49947]"},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":"[sum(clave[k*10^5:(k+1)*10^5]) for k in srange(10)]"}
{"cell_type":"code","execution_count":7,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"def cadena(L):\n    C = ''\n    for item in L:\n        C += str(item)\n    return C"}
{"cell_type":"code","execution_count":8,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"'1110011100'"},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":"clave_c = cadena(clave);clave_c[0:10]"}
{"cell_type":"markdown","metadata":{},"source":"<h3>Apartado 2: Codificar</h3>"}
{"cell_type":"code","execution_count":9,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"L_alf = list(alf)"}
{"cell_type":"code","execution_count":10,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"def ord2(c):\n    return L_alf.index(c)"}
{"cell_type":"code","execution_count":11,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"def chr2(n):\n    return L_alf[n]"}
{"cell_type":"code","execution_count":12,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"def codificar(texto):\n    texto_c = ''\n    L = map(ord2,list(texto))\n    for item in L:\n        L1 = ZZ(item).digits(base=2,padto=5)\n        L1.reverse()        ##los digitos estan en el orden contrario al que queremos\n        texto_c += cadena(L1)\n    return texto_c"}
{"cell_type":"code","execution_count":13,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"def descodificar(texto_e):\n    texto_d = ''\n    if len(texto_e) == 0:\n        return texto_d\n    texto_dp = descodificar(texto_e[5:])\n    return chr2(ZZ(texto_e[:5],base=2))+texto_dp"}
{"cell_type":"code","execution_count":14,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"smc-blob::6550ab30-8476-47af-934f-41562500f832"},"execution_count":14,"metadata":{},"output_type":"execute_result"}],"source":"descodificar(codificar(texto))"}
{"cell_type":"markdown","metadata":{},"source":"<h3>Apartado 3: encriptar</h3>"}
{"cell_type":"code","execution_count":15,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"def suma_s(c1,c2):\n    if (c1 == '0' and c2 == '0') or (c1 == '1' and c2 == '1'):\n        return '0'\n    else:\n        return '1'"}
{"cell_type":"code","execution_count":16,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"def encriptar(texto_c,clave):\n    texto_e = ''\n    for int in srange(len(texto_c)):\n        texto_e += suma_s(texto_c[int],clave[int])\n    return texto_e"}
{"cell_type":"code","execution_count":17,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"smc-blob::53729669-226e-4a31-8f72-9d3309dbe36f"},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":"texto_c = codificar(texto);texto_c"}
{"cell_type":"code","execution_count":18,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"smc-blob::f0799c25-f33a-44ee-871c-4f323ec2cbda"},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":"texto_en = encriptar(texto_c,clave_c);texto_en"}
{"cell_type":"code","execution_count":19,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"smc-blob::c864be9b-4807-4923-a678-3cee33e3b38e"},"execution_count":19,"metadata":{},"output_type":"execute_result"}],"source":"descodificar(texto_en)"}
{"cell_type":"code","execution_count":20,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"True"},"execution_count":20,"metadata":{},"output_type":"execute_result"}],"source":"encriptar(encriptar(texto_c,clave_c),clave_c)==texto_c"}
{"cell_type":"code","execution_count":21,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"smc-blob::6550ab30-8476-47af-934f-41562500f832"},"execution_count":21,"metadata":{},"output_type":"execute_result"}],"source":"descodificar(encriptar(encriptar(texto_c,clave_c),clave_c))"}
{"cell_type":"markdown","metadata":{},"source":"<h3>Apartado 4: Discutir la seguridad del sistema</h3>\n\n<p>Este sistema es totalmente seguro siempre que se consiga mantener en secreto la clave, &eacute;sta se haya generado realmente de manera aleatoria y no se reutilice nunca un trozo de la clave ya usado.&nbsp; Pensemos en un ataque por \"fuerza bruta\": Si el mensaje tiene $N$ bits tendr&iacute;amos que probar&nbsp; las $2^N$ posibles claves y, para cada una de ellas, obtendr&iacute;amos un posible mensaje,&nbsp; pero TODOS los&nbsp; mensajes de $N$ bits aparecer&iacute;an&nbsp; y no habr&iacute;a manera de decidir entre ellos. Por ejemplo, para una cierta clave podr&iacute;amos obtener \"ATACAMOS\",&nbsp; pero para otra obtendr&iacute;amos \"RETIRADA\" y el mensaje encriptado no contiene ninguna informaci&oacute;n que nos permita decidir entre los dos.</p>\n<p>Podemos argumentar tambi&eacute;n lo siguiente:</p>\n<ol>\n<li>En el sistema de C&eacute;sar todas las letras se encriptan con la misma clave y el mensaje encriptado contiene todav&iacute;a un mont&oacute;n de informaci&oacute;n, las frecuencias, acerca del mensaje original. El sistema tambi&eacute;n permite un ataque de fuerza bruta y es muy vulnerable.&nbsp;</li>\n<li>En el sistema de Vigenere las letras cuya posici&oacute;n difiere en $k$ unidades, la longitud de la clave, se encriptan igual. El mensaje encriptado, si es de suficiente longitud, todav&iacute;a contiene suficiente informaci&oacute;n como para que sea posible un an&aacute;lisis de frecuencias.&nbsp; Un ataque por fuerza bruta es posible en teor&iacute;a, pero si la clave es muy larga imposible en la pr&aacute;ctica.</li>\n<li>El sistema que estamos discutiendo es, esencialmente, como un Vigenere con la longitud de la clave igual a la longitud del texto.&nbsp; Si la clave se genera aleatoriamente, no queda en el mensaje encriptado ninguna informaci&oacute;n de frecuencias relevante. Si la clave se reutiliza el sistema ya es como un Vigenere, con un texto de longitud el doble de la clave,&nbsp; y el mensaje encriptado contiene algo de informaci&oacute;n sobre el original que puede ser utilizada. </li>\n</ol>\n\n<h3>Apartado 5 : Variante</h3>\n\n<p>Â¿Podemos usar una suma llevando, es decir $1+1=10$ en lugar de $1+1=0$? Para que este m&eacute;todo funcione es conveniente que el mensaje encriptado contenga tambi&eacute;n el n&uacute;mero de bits del mensaje original,&nbsp; ya que es posible que el mensaje encriptado sea m&aacute;s largo porque sumamos llevando. Sin embargo, la longitud del mensage encriptado s&oacute;lo puede ser igual a la del mensaje original o un bit mayor, de forma que si no conocemos la longitud del original podemos hacer dos pruebas y ver cu&aacute;l funciona.</p>\n<p>Como queremos sumar llevando parece mejor efectuar la suma en base 10 en lugar de implementar una suma binaria llevando.</p>"}
{"cell_type":"code","execution_count":22,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"def encriptar2(texto_c,clave_c):\n    N1 = ZZ(texto_c,base=2)\n    N2 = ZZ(clave_c[:len(texto_c)],base=2)\n    return len(texto_c),cadena((N1+N2).digits(base=2))"}
{"cell_type":"code","execution_count":23,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"def desencriptar2(texto_e,clave_c):\n    L = list(texto_e[1])\n    L.reverse()\n    N1 = ZZ(join(L,sep=''),base=2)\n    N2 = ZZ(clave_c[:texto_e[0]],base=2)\n    C = cadena((N1-N2).digits(base=2,padto=texto_e[0]))\n    L = list(C)\n    L.reverse() #Otra vez, digits produce el orden inverso al que queremos\n    return cadena(L)"}
{"cell_type":"code","execution_count":24,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"True"},"execution_count":24,"metadata":{},"output_type":"execute_result"}],"source":"desencriptar2(encriptar2(codificar(texto),clave_c),clave_c)==codificar(texto)"}
{"cell_type":"code","execution_count":25,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"True"},"execution_count":25,"metadata":{},"output_type":"execute_result"}],"source":"C = join([alf[randint(0,31)] for j in srange(10^5)],sep='') \ndesencriptar2(encriptar2(codificar(C),clave_c),clave_c)==codificar(C)"}