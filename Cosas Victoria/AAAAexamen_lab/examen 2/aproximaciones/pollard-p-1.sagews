︠e3b61da3-519f-4b80-88fa-c0f205901851︠
def pollard_aux(B,n):
    L = prime_range(B+1)
    M = prod([q^((log(B,base=q).n()).ceil()) for q in L])
    a =2
    g = gcd(power_mod(a,M,n)-1,n)
    if 1<g and g<n:
        return g
    else:
        return False
︡6164d64e-196c-4119-b0e4-efe7a4de092f︡︡
︠915200e9-bf5c-42a7-8738-bac047690869︠
pollard_aux(1000,nth_prime(1374)*nth_prime(13826755));nth_prime(1374);nth_prime(13826755);nth_prime(1374)*nth_prime(13826755)
︡1e52cb87-6e7b-41d1-bd9c-8fab0931a3f4︡{"stdout": "11383\n11383\n252852469\n2878219654627"}︡
︠50e5c19c-6844-4e02-88ac-9975803d95d5︠
factor(nth_prime(1374)-1)
︡2edce6f7-3c19-4998-8ccb-142d9d1b8fb9︡{"stdout": "2 * 3 * 7 * 271"}︡
︠e6cbac99-a7c6-4b0b-81fc-4def92c2f477︠
pollard_aux(100,nth_prime(1374)*nth_prime(13826755))
︡f5d97e33-3ba8-4766-a2aa-22d91dbeae56︡{"stdout": "False"}︡
︠d98e669e-7139-4a53-a399-ba2f0a7e7261︠
[pollard_aux(10^k,nth_prime(1374)*nth_prime(13826755)) for k in srange(1,5)]
︡e4de02dc-5e88-4754-9f97-de963a9f5917︡{"stdout": "[False, False, 11383, False]"}︡
︠d33ea59c-a7e9-441a-8edd-58b7262dd118︠
def pollard_aux2(B,n):
    L = prime_range(B+1)
    M = prod([q^((log(B,base=q).n()).ceil()) for q in L])
    for muda in srange(100):
        a = randint(2,1000)
        if gcd(a,n)== 1:
            g = gcd(power_mod(a,M,n)-1,n)
            print a,g
            if 1<g and g<n:
                return g
    return False
︡4dce45fb-a1dc-4fce-9546-61269e6c645c︡︡
︠bb928182-e0f4-44d0-be76-722565c98e22︠
pollard_aux2(10000,nth_prime(1374)*nth_prime(13826755))
︡8f288158-b1f8-4692-bbd9-c3b94e878990︡{"stdout": "760 2878219654627\n23 2878219654627\n898 2878219654627\n493 2878219654627\n278 2878219654627\n302 2878219654627\n210 2878219654627\n786 2878219654627\n386 2878219654627\n4 2878219654627\n204 2878219654627\n981 2878219654627\n826 2878219654627\n313 2878219654627\n537 2878219654627\n995 2878219654627\n930 2878219654627\n866 2878219654627\n442 2878219654627\n275 2878219654627\n765 2878219654627\n457 2878219654627\n35 2878219654627\n584 2878219654627\n628 2878219654627\n922 2878219654627\n191 2878219654627\n213 2878219654627\n54 2878219654627\n487 2878219654627\n149 2878219654627\n844 2878219654627\n410 2878219654627\n222 2878219654627\n147 2878219654627\n394 2878219654627\n537 2878219654627\n790 2878219654627\n557 2878219654627\n448 2878219654627\n90 2878219654627\n988 2878219654627\n684 2878219654627\n643 2878219654627\n625 2878219654627\n502 2878219654627\n451 2878219654627\n681 2878219654627\n293 2878219654627\n22 2878219654627\n936 2878219654627\n642 2878219654627\n820 2878219654627\n277 2878219654627\n270 2878219654627\n238 2878219654627\n532 2878219654627\n536 2878219654627\n416 2878219654627\n936 2878219654627\n768 2878219654627\n201 2878219654627\n208 2878219654627\n757 2878219654627\n616 2878219654627\n129 2878219654627\n737 2878219654627\n210 2878219654627\n220 2878219654627\n292 2878219654627\n881 2878219654627\n643 2878219654627\n535 2878219654627\n376 2878219654627\n765 2878219654627\n244 2878219654627\n903 2878219654627\n37 2878219654627\n944 2878219654627\n895 2878219654627\n873 2878219654627\n179 2878219654627\n12 2878219654627\n368 2878219654627\n680 2878219654627\n365 2878219654627\n226 2878219654627\n547 2878219654627\n833 2878219654627\n100 2878219654627\n938 2878219654627\n858 2878219654627\n648 2878219654627\n870 2878219654627\n96 2878219654627\n956 2878219654627\n636 2878219654627\n669 2878219654627\n62 2878219654627\n130 2878219654627\nFalse"}︡
︠001c479d-7c0b-4506-b0a3-4eb5973e1348︠
[pollard_aux(10^k,nth_prime(1974)*nth_prime(13826755)) for k in srange(1,5)]
︡be56b728-13c4-4c1b-9b5f-bed47917266c︡{"stdout": "[False, False, False, False]"}︡
︠e2b871e8-e048-43f4-b49d-c64444a19179︠
[pollard_aux(10^k,nth_prime(1974)*nth_prime(13826755)) for k in srange(1,6)]
︡077ad63e-56c7-4c29-97e8-83cdfb2e9857︡{"stdout": "[False, False, False, False, False]"}︡
︠7300d1c0-5b90-459f-a87a-d7e34d54cad7︠
factor(nth_prime(1974)-1)
︡0f15d5eb-daee-43e9-b402-8a5062582dbc︡{"stdout": "2 * 7 * 1223"}︡
︠56a64a2b-cba5-46a6-97b3-58fba64fe9a8︠
pollard_aux(1300,nth_prime(1974)*nth_prime(13826755))
︡9f55d28e-62c3-497e-ac40-c3f30a60a1c4︡{"stdout": "17123"}︡
︠48e4034d-97ba-4e78-a213-bf5219d467cd︠
pollard_aux2(10000,nth_prime(1974)*nth_prime(13826755))
︡31db6628-ac14-4801-ab30-fe1621dadd0a︡{"stdout": "25 4329592826687\n378 4329592826687\n653 4329592826687\n512 4329592826687\n418 4329592826687\n570 4329592826687\n523 4329592826687\n673 4329592826687\n502 4329592826687\n433 4329592826687\n707 4329592826687\n794 4329592826687\n618 4329592826687\n987 4329592826687\n622 4329592826687\n746 4329592826687\n953 4329592826687\n556 4329592826687\n776 4329592826687\n657 4329592826687\n500 4329592826687\n923 4329592826687\n102 4329592826687\n179 4329592826687\n526 4329592826687\n898 4329592826687\n403 4329592826687\n437 4329592826687\n355 4329592826687\n886 4329592826687\n80 4329592826687\n904 4329592826687\n126 4329592826687\n826 4329592826687\n123 4329592826687\n555 4329592826687\n234 4329592826687\n148 4329592826687\n939 4329592826687\n589 4329592826687\n841 4329592826687\n518 4329592826687\n839 4329592826687\n153 4329592826687\n392 4329592826687\n742 4329592826687\n910 4329592826687\n757 4329592826687\n840 4329592826687\n613 4329592826687\n387 4329592826687\n181 4329592826687\n696 4329592826687\n513 4329592826687\n968 4329592826687\n350 4329592826687\n718 4329592826687\n369 4329592826687\n611 4329592826687\n189 4329592826687\n655 4329592826687\n359 4329592826687\n804 4329592826687\n848 4329592826687\n262 4329592826687\n693 4329592826687\n282 4329592826687\n415 4329592826687\n337 4329592826687\n155 4329592826687\n760 4329592826687\n536 4329592826687\n723 4329592826687\n578 4329592826687\n141 4329592826687\n389 4329592826687\n317 4329592826687\n241 4329592826687\n912 4329592826687\n51 4329592826687\n133 4329592826687\n814 4329592826687\n161 4329592826687\n156 4329592826687\n752 4329592826687\n484 4329592826687\n947 4329592826687\n221 4329592826687\n379 4329592826687\n102 4329592826687\n470 4329592826687\n727 4329592826687\n767 4329592826687\n441 4329592826687\n884 4329592826687\n406 4329592826687\n758 4329592826687\n392 4329592826687\n837 4329592826687\n382 4329592826687\nFalse"}︡
︠5ded08bd-4f87-4b99-bdb6-d6f76f153cc7︠
def pollard(n):
    valor = False
    cont = 0
    B = 10
    while valor == False and cont < 100:
        valor=pollard_aux(B,n)
        B += 100
        cont += 1
    return valor,B
︡6fee9d60-8876-4eea-bb76-8d10d13001ef︡︡
︠7313e563-0f26-475c-8657-e87909164803︠
pollard(nth_prime(1974)*nth_prime(13826755))
︡2dc25275-22b5-4523-8aa9-c05e8cce500c︡{"stdout": "(17123, 1410)"}︡









